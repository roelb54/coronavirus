guess=cbind(elite,elite.m.1,elite.m.2,cross.overs)
score(target,guess)
elite = select.elite(target,guess)
elite.m.1 = mutate(elite)
elite.m.2 = mutate(elite)
cross.overs=cross.over(target,guess)
guess=cbind(elite,elite.m.1,elite.m.2,cross.overs)
score(target,guess)
elite = select.elite(target,guess)
elite.m.1 = mutate(elite)
elite.m.2 = mutate(elite)
cross.overs=cross.over(target,guess)
guess=cbind(elite,elite.m.1,elite.m.2,cross.overs)
score(target,guess)
elite = select.elite(target,guess)
elite.m.1 = mutate(elite)
elite.m.2 = mutate(elite)
cross.overs=cross.over(target,guess)
guess=cbind(elite,elite.m.1,elite.m.2,cross.overs)
score(target,guess)
guess
library(microbenchmark)
A = matrix(runif(1000*1000),1000,1000)
B = matrix(runif(1000*1000),1000,1000)
microbenchmark(A %*% B, times=10)
library(microbenchmark)
A = matrix(runif(800*30),800,30)
B = matrix(runif(800*800),800,800)
microbenchmark(A %*% B, times=10)
A = matrix(runif(800*800),800,800)
B = matrix(runif(800*30),800,30)
microbenchmark(A %*% B, times=10)
microbenchmark(A %*% B, times=10)
microbenchmark(A %*% B, times=10)
A = matrix(runif(10*15),10,15)
B = matrix(runif(10*10),10,10)
microbenchmark(B %*% A)
microbenchmark(B %*% A,times=10)
microbenchmark(B %*% A,times=1)
microbenchmark(B %*% A,times=1)
mm = function matmul(A,B,cols=15,rows=10){
A = matrix(runif(rows*cols),rows,cols)
B = matrix(runif(rows*rows),rows,rows)
B %*% A
}
mm = function matmul(A,B,cols=15,rows=10){
A = matrix(runif(rows*cols),rows,cols)
B = matrix(runif(rows*rows),rows,rows)
B %*% A
}
mm = function matmul(A,B,cols=15,rows=10){
A = matrix(runif(rows*cols),rows,cols)
B = matrix(runif(rows*rows),rows,rows)
B %*% A
}
mm = function(A,B,cols=15,rows=10){
A = matrix(runif(rows*cols),rows,cols)
B = matrix(runif(rows*rows),rows,rows)
B %*% A
}
mm = function(cols=15,rows=10){
A = matrix(runif(rows*cols),rows,cols)
B = matrix(runif(rows*rows),rows,rows)
B %*% A
}
mm = function(cols=15,rows=10){
A = matrix(runif(rows*cols),rows,cols)
B = matrix(runif(rows*rows),rows,rows)
B %*% A
}
mm = function(cols=15,rows=10){
A = matrix(runif(rows*cols),rows,cols)
B = matrix(runif(rows*rows),rows,rows)
B %*% A
}
microbenchmark(mm(10,15))
microbenchmark(mm(10,15))
mm = function(cols=15,rows=10){
A = matrix(runif(rows*cols),rows,cols)
B = matrix(runif(rows*rows),rows,rows)
#  B %*% A
}
microbenchmark(mm(10,15))
microbenchmark(mm(10,15))
microbenchmark(mm(10,15))
microbenchmark(mm(10,15))
mm = function(cols=15,rows=10){
A = matrix(runif(rows*cols),rows,cols)
B = matrix(runif(rows*rows),rows,rows)
B %*% A
}
microbenchmark(mm(10,15))
microbenchmark(mm(10,15))
microbenchmark(mm(10,15))
library(microbenchmark)
mm = function(cols=15,rows=10){
A = matrix(runif(rows*cols),rows,cols)
B = matrix(runif(rows*rows),rows,rows)
B %*% A
}
microbenchmark(mm(10,15))
microbenchmark(mm(10,15))
A = matrix(runif(10*15),10,15)
B = matrix(runif(10*10),10,10)
microbenchmark(B %*% A)
microbenchmark(B %*% A)
microbenchmark(B %*% A)
microbenchmark(B %*% A)
microbenchmark(B %*% A)
microbenchmark(B %*% A)
microbenchmark(B %*% A)
library(microbenchmark)
A = matrix(runif(10*15),10,15)
B = matrix(runif(10*10),10,10)
mm = function(cols=15,rows=10){
A = matrix(runif(rows*cols),rows,cols)
B = matrix(runif(rows*rows),rows,rows)
B %*% A
}
microbenchmark(B %*% A)
microbenchmark(B %*% A)
microbenchmark(B %*% A)
microbenchmark(B %*% A)
microbenchmark(B %*% A)
microbenchmark(B %*% A)
microbenchmark(B %*% A)
microbenchmark(B %*% A)
microbenchmark(B %*% A)
library(diffeqr)
diffeq_setup()
library(gpuR)
install.packages("gpuR")
library(gpuR)
detectGPUs()
set.seed(123)
A <- vclMatrix(runif(1000*1000), nrow=1000, ncol=1000)
B <- vclMatrix(runif(1000*1000), nrow=1000, ncol=1000)
microbenchmark(A %*% B)
library(microbenchmark)
microbenchmark(A %*% B)
microbenchmark(A %*% B)
P <- matrix(runif(1000*1000), nrow=1000, ncol=1000)
Q <- matrix(runif(1000*1000), nrow=1000, ncol=1000)
microbenchmark(P %*% Q)
microbenchmark(P %*% Q, times = 10)
sample(3,5)
sample(3,5,replace = T)
modif = function(M){
for (i in 1:1000){
RC = sample(1000,2,T)
M[RC[1],RC[2]]=runif(1)
}
M
}
microbenchmark(modify(A))
microbenchmark(modif(A))
microbenchmark(modif(A),times=10)
microbenchmark(modif(P),times=10)
detach("package:gpuR", unload = TRUE)
set.seed(7)
true_fn = function(x,b0=-1,b1=0.5,noise=0){
b0+b1*x^3+noise*(runif(length(x))-0.5)
}
x = (0:20)/5-2
y = true_fn(x,noise=1)
plot(x,y,type="p",pch=22,col="blue",bg="blue")
# fit a simple linear model: y = b0 + b1*x
m1=lm(y~x)
summary(m1) # highly significant values for b0 and b1 ; model explains 81% of variance
abline(m1,col="green",lwd=2)
print(sum((predict.lm(m1)-y)^2)) # RSS of the fit obtained with training data = 12.2
# what if we test the model with 50 different test sets?
acc=0.
N=50
for (i in 1:N){
acc=acc+sum((predict.lm(m1)-true_fn(x,noise=1))^2)
}
print(acc/N) # i.e. the mean RSS (residual sum of squares) = 12.1
m7=lm(y~poly(x,7))
summary(m7)
plot(x,y,type="p",pch=22,col="blue",bg="blue")
lines(x,predict.lm(m7),col="red",lwd=2)
# even better!! R^2 = 98% (% of variance explained) and the model fit the points even better!
# the RSS:
print(sum((predict.lm(m7)-y)^2)) # 1.39
acc=0.
N=50
for (i in 1:N){
acc=acc+sum((predict.lm(m7)-true_fn(x,noise=1))^2)
}
print(acc/N) # i.e. the mean RSS (residual sum of squares) = 2.6 i.e. WORSE than the 1.39 with the training set ....
m3=lm(y~poly(x,3))
summary(m3)
plot(x,y,type="p",pch=22,col="blue",bg="blue")
lines(x,predict.lm(m3),col="green",lwd=2)
acc=0.
N=50
for (i in 1:N){
acc=acc+sum((predict.lm(m3)-true_fn(x,noise=1))^2)
}
print(acc/N) # i.e. the mean RSS (residual sum of squares) = 2.0 i.e. MUCH better and not different from RSS with training set!
mean.M  = 180 ; sd.M = 7
mean.F  = 170 ; sd.F = 7
males   = rnorm(50,mean.M, sd.M)
females = rnorm(50,mean.F, sd.F)
plot(150:200,dnorm(150:200,mean.M,sd.M),type="l",lwd=2,col="blue")
lines(150:200,dnorm(150:200,mean.F,sd.F),type="l",lwd=2,col="red")
z = data.frame(height=c(males,females),gender=c(rep(1,50),rep(0,50)))
z = z[order(z$height),]
plot(z$height[z$gender==0],z$gender[z$gender==0],col="red",pch=19,ylim=c(0,1),xlim=c(150,210))
points(z$height[z$gender==1],z$gender[z$gender==1],col="blue",pch=19)
? glm
model = glm(gender ~ height, family = binomial, data = z )
lines(z$height,1/(1+exp(-predict(model))),col="darkgreen",lwd=2)
# < 175 cm => female en > 175 => male
pred.male = 1/(1+exp(-predict(model))) >=0.5
true.male = z$gender == 1
sum(pred.male & true.male)
sum(true.male)
sensitivity = sum(pred.male & true.male) / sum(true.male)
sensitivity
sens = 0.98
spec = 0.98
P_D  = 0.04
# P(D|+) = P(+|D) * P(D) /(P(+|D) * P(D) + (1-spec) * P(~D))
sens * P_D / (sens * P_D + (1-spec) * (1-P_D)
)
sens * P_D / (sens * P_D + (1-spec) * (1-P_D))
P_D  = 0.01
sens * P_D / (sens * P_D + (1-spec) * (1-P_D))
install.packages("regsem")
library(deSolve)
SEIR2 = function(t, state, parameters) {
with(as.list(c(state, parameters)),{
if (t>tinc){
b1 = b1inc
b2 = b2inc
w  = winc
}
N1 = S1+E1+I1+R1
N2 = S2+E2+I2+R2
labda1 = b1*(w*I1/N1 + (1-w)*I2/N2)
dS1 = -labda1*S1
dE1 =  labda1*S1 - E1/dinc
dI1 =  E1/dinc - I1/dinf
dH1 =    fh1 *I1/dinf    - fc1 *H1/(0.75*dhosp) - (1-fc1)*H1/dhosp
dC1 =                      fc1 *H1/(0.75*dhosp)        - C1/dicu
dR1 = (1-fh1)*I1/dinf + (1-fc1)*H1/dhosp        + (1-mu1)*C1/dicu
dD1 =  mu1*C1/dicu
labda2 = (b2-b1*(1-w)*N1/N2)*I2/N2 + (1-w)*b1*N1/N2*I1/N1
dS2 = -labda2*S2
dE2 =  labda2*S2 - E2/dinc
dI2 =  E2/dinc   - I2/dinf
dH2 =  fh2*I2/dinf - fc2 *H2/(0.75*dhosp) - (1-fc2)*H2/dhosp
dC2 =                fc2 *H2/(0.75*dhosp) - C2/dicu
dR2 = (1-fh2)*I2/dinf + (1-fc2)*H2/dhosp        + (1-mu2)*C2/dicu
dD2 =  mu2*C2/dicu
# return the rate of change
list(c(dS1, dE1, dI1, dH1, dC1, dR1, dD1, dS2, dE2, dI2, dH2, dC2, dR2, dD2))
})
}
dur = 4.6
R0young  = 0.7 * 0.7 * 2.84 # 0.70 * 0.70
R0young2 = 1.0 * 0.7 * 2.84 # 0.70 * 0.70
R0old    = 0.6 * 0.7 * 1.75 # 0.60 * 0.70
R0old2   = 0.7 * 0.7 * 1.75
# b1 = 1.39 => 0.97 * 1.39 = 1.35 (assortative) + 0.03 * 1.39 = 0.042 (disass)
# b2 = 0.735 => 0.693 (assor) + 0.042 (disass)
# b1 = 2.00 => 1.736 (assortative) + 0.274 (disass)
# b2 = 1.25 => 0.976 + 0.274
# winc = 0.868
params2 = c(dinc=dur,dinf=dur,dhosp=8,dicu=10,fh1=2.03/100,fh2=16.88/100,fc1=5.674/100,fc2=0.355,mu1=0.5,mu2=0.5,
b1=R0young/dur,b2=R0old/dur, w=0.97, tinc=300, b1inc=R0young2/dur, b2inc=R0old2/dur ,winc=0.863)
state2  = c(S1=10000-7.5,E1=3.75,I1=3.75,H1=0,C1=0,R1=0,D1=0,
S2= 7000-2.5,E2=1.25,I2=1.25,H2=0.3,C2=0.2,R2=0,D2=0)
times <- seq(0, 700, by = 1)
out = as.data.frame(ode(y = state2, times = times, func = SEIR2, parms = params2, method="adams"))
View(out)
625/7000
plot(out$time,out$R1,type="l",col="red",ylim=c(0,5500),lwd=2,xlab="dagen",ylab="hersteld en immuun (duizenden)")
lines(out$time,out$R2,type="l",col="magenta",lty=2,lwd=2)
legend(500, 5500, legend=c("leeftijd < 50", "leeftijd >= 50"),
col=c("red", "magenta"), lty=c(1,1,2), cex=0.8)
png("immune.png")
plot(out$time,out$R1,type="l",col="red",ylim=c(0,5500),lwd=2,xlab="dagen",ylab="hersteld en immuun (duizenden)")
lines(out$time,out$R2,type="l",col="magenta",lty=2,lwd=2)
legend(500, 5500, legend=c("leeftijd < 50", "leeftijd >= 50"),
col=c("red", "magenta"), lty=c(1,1,2), cex=0.8)
dev.off()
setwd("C:/Users/roelb/GitHub/coronavirus/SEIRx2")
png("immune.png")
plot(out$time,out$R1,type="l",col="red",ylim=c(0,5500),lwd=2,xlab="dagen",ylab="hersteld en immuun (duizenden)")
lines(out$time,out$R2,type="l",col="magenta",lty=2,lwd=2)
legend(500, 5500, legend=c("leeftijd < 50", "leeftijd >= 50"),
col=c("red", "magenta"), lty=c(1,1,2), cex=0.8)
dev.off()
plot(out$time,out$D1*1000,type="l",col="red",ylim=c(0,200000),xlab="dagen",ylab="sterfgevallen")
lines(out$time,out$D2*1000,type="l",col="magenta",lty=2)
lines(out$time,(out$D1+out$D2)*1000,type="l",col="blue",lwd=2)
legend(450, 25000, legend=c("totaal","leeftijd < 50", "leeftijd >= 50"),
col=c("blue","red", "magenta"), lty=c(1,1,2), cex=0.8)
library(deSolve)
SEIR2 = function(t, state, parameters) {
with(as.list(c(state, parameters)),{
if (t>tinc){
b1 = b1inc
b2 = b2inc
w  = winc
}
N1 = S1+E1+I1+R1
N2 = S2+E2+I2+R2
labda1 = b1*(w*I1/N1 + (1-w)*I2/N2)
dS1 = -labda1*S1
dE1 =  labda1*S1 - E1/dinc
dI1 =  E1/dinc - I1/dinf
dH1 =    fh1 *I1/dinf    - fc1 *H1/(0.75*dhosp) - (1-fc1)*H1/dhosp
dC1 =                      fc1 *H1/(0.75*dhosp)        - C1/dicu
dR1 = (1-fh1)*I1/dinf + (1-fc1)*H1/dhosp        + (1-mu1)*C1/dicu
dD1 =  mu1*C1/dicu
labda2 = (b2-b1*(1-w)*N1/N2)*I2/N2 + (1-w)*b1*N1/N2*I1/N1
dS2 = -labda2*S2
dE2 =  labda2*S2 - E2/dinc
dI2 =  E2/dinc   - I2/dinf
dH2 =  fh2*I2/dinf - fc2 *H2/(0.75*dhosp) - (1-fc2)*H2/dhosp
dC2 =                fc2 *H2/(0.75*dhosp) - C2/dicu
dR2 = (1-fh2)*I2/dinf + (1-fc2)*H2/dhosp        + (1-mu2)*C2/dicu
dD2 =  mu2*C2/dicu
# return the rate of change
list(c(dS1, dE1, dI1, dH1, dC1, dR1, dD1, dS2, dE2, dI2, dH2, dC2, dR2, dD2))
})
}
dur = 4.6
R0young  = 0.7 * 0.7 * 2.84 # 0.70 * 0.70
R0young2 = 1.0 * 0.7 * 2.84 # 0.70 * 0.70
R0old    = 0.6 * 0.7 * 1.75 # 0.60 * 0.70
R0old2   = 0.7 * 0.7 * 1.75
# b1 = 1.39 => 0.97 * 1.39 = 1.35 (assortative) + 0.03 * 1.39 = 0.042 (disass)
# b2 = 0.735 => 0.693 (assor) + 0.042 (disass)
# b1 = 2.00 => 1.736 (assortative) + 0.274 (disass)
# b2 = 1.25 => 0.976 + 0.274
# winc = 0.868
params2 = c(dinc=dur,dinf=dur,dhosp=8,dicu=10,fh1=2.03/100,fh2=16.88/100,fc1=5.674/100,fc2=0.355,mu1=0.5,mu2=0.5,
b1=R0young/dur,b2=R0old/dur, w=0.97, tinc=300, b1inc=R0young2/dur, b2inc=R0old2/dur ,winc=0.863)
state2  = c(S1=10000-7.5,E1=3.75,I1=3.75,H1=0,C1=0,R1=0,D1=0,
S2= 7000-2.5,E2=1.25,I2=1.25,H2=0.3,C2=0.2,R2=0,D2=0)
times <- seq(0, 700, by = 1)
out = as.data.frame(ode(y = state2, times = times, func = SEIR2, parms = params2, method="adams"))
plot(out$time,out$D1*1000,type="l",col="red",ylim=c(0,200000),xlab="dagen",ylab="sterfgevallen")
lines(out$time,out$D2*1000,type="l",col="magenta",lty=2)
lines(out$time,(out$D1+out$D2)*1000,type="l",col="blue",lwd=2)
legend(450, 25000, legend=c("totaal","leeftijd < 50", "leeftijd >= 50"),
col=c("blue","red", "magenta"), lty=c(1,1,2), cex=0.8)
plot(out$time,out$D1*1000,type="l",col="red",ylim=c(0,50000),xlab="dagen",ylab="sterfgevallen")
lines(out$time,out$D2*1000,type="l",col="magenta",lty=2)
lines(out$time,(out$D1+out$D2)*1000,type="l",col="blue",lwd=2)
legend(450, 25000, legend=c("totaal","leeftijd < 50", "leeftijd >= 50"),
col=c("blue","red", "magenta"), lty=c(1,1,2), cex=0.8)
View(out)
library(deSolve)
SEIR2 = function(t, state, parameters) {
with(as.list(c(state, parameters)),{
if (t>tinc){
b1 = b1inc
b2 = b2inc
w  = winc
}
N1 = S1+E1+I1+R1
N2 = S2+E2+I2+R2
labda1 = b1*(w*I1/N1 + (1-w)*I2/N2)
dS1 = -labda1*S1
dE1 =  labda1*S1 - E1/dinc
dI1 =  E1/dinc - I1/dinf
dH1 =    fh1 *I1/dinf    - fc1 *H1/(0.75*dhosp) - (1-fc1)*H1/dhosp
dC1 =                      fc1 *H1/(0.75*dhosp)        - C1/dicu
dR1 = (1-fh1)*I1/dinf + (1-fc1)*H1/dhosp        + (1-mu1)*C1/dicu
dD1 =  mu1*C1/dicu
labda2 = (b2-b1*(1-w)*N1/N2)*I2/N2 + (1-w)*b1*N1/N2*I1/N1
dS2 = -labda2*S2
dE2 =  labda2*S2 - E2/dinc
dI2 =  E2/dinc   - I2/dinf
dH2 =  fh2*I2/dinf - fc2 *H2/(0.75*dhosp) - (1-fc2)*H2/dhosp
dC2 =                fc2 *H2/(0.75*dhosp) - C2/dicu
dR2 = (1-fh2)*I2/dinf + (1-fc2)*H2/dhosp        + (1-mu2)*C2/dicu
dD2 =  mu2*C2/dicu
# return the rate of change
list(c(dS1, dE1, dI1, dH1, dC1, dR1, dD1, dS2, dE2, dI2, dH2, dC2, dR2, dD2))
})
}
dur = 4.6
R0young  = 0.7 * 0.7 * 2.84 # 0.70 * 0.70
R0young2 = 1.0 * 0.7 * 2.84 # 0.70 * 0.70
R0old    = 0.6 * 0.7 * 1.75 # 0.60 * 0.70
R0old2   = 0.7 * 0.7 * 1.75
# b1 = 1.39 => 0.97 * 1.39 = 1.35 (assortative) + 0.03 * 1.39 = 0.042 (disass)
# b2 = 0.735 => 0.693 (assor) + 0.042 (disass)
# b1 = 2.00 => 1.736 (assortative) + 0.274 (disass)
# b2 = 1.25 => 0.976 + 0.274
# winc = 0.868
params2 = c(dinc=dur,dinf=dur,dhosp=8,dicu=10,fh1=2.03/100,fh2=16.88/100,fc1=5.674/100,fc2=0.355,mu1=0.5,mu2=0.5,
b1=R0young/dur,b2=R0old/dur, w=0.97, tinc=300, b1inc=R0young2/dur, b2inc=R0old2/dur ,winc=0.863)
state2  = c(S1=10000-7.5,E1=3.75,I1=3.75,H1=0,C1=0,R1=0,D1=0,
S2= 7000-2.5,E2=1.25,I2=1.25,H2=0.3,C2=0.2,R2=0,D2=0)
times <- seq(0, 700, by = 1)
out = as.data.frame(ode(y = state2, times = times, func = SEIR2, parms = params2, method="adams"))
png("besmettingen-400600.png",width=600, height=400)
plot(out$time,out$I1,type="l",col="red",ylim=c(0,250),xlab="dagen",ylab="aantal infecties (duizenden)",lwd=2)
lines(out$time,out$I2,type="l",lty=2,col="magenta",lwd=2)
legend(500, 250, legend=c("leeftijd < 50", "leeftijd >= 50"),
col=c("red", "magenta"), lty=1:2, cex=0.8)
dev.off()
? legend
png("besmettingen-400600.png",width=600, height=400)
plot(out$time,out$I1,type="l",col="red",ylim=c(0,250),xlab="dagen",ylab="aantal infecties (duizenden)",lwd=2)
lines(out$time,out$I2,type="l",lty=2,col="magenta",lwd=2)
legend(500, 250, legend=c("leeftijd < 50", "leeftijd >= 50"),
col=c("red", "magenta"), lty=1:2, cex=1.2)
png("besmettingen-400600.png",width=600, height=400)
plot(out$time,out$I1,type="l",col="red",ylim=c(0,250),xlab="dagen",ylab="aantal infecties (duizenden)",lwd=2)
lines(out$time,out$I2,type="l",lty=2,col="magenta",lwd=2)
legend(500, 250, legend=c("leeftijd < 50", "leeftijd >= 50"),
col=c("red", "magenta"), lty=1:2, cex=1.5)
dev.off()
plot(out$time,out$I1,type="l",col="red",ylim=c(0,250),xlab="dagen",ylab="aantal infecties (duizenden)",lwd=2)
lines(out$time,out$I2,type="l",lty=2,col="magenta",lwd=2)
legend(500, 250, legend=c("leeftijd < 50", "leeftijd >= 50"),
col=c("red", "magenta"), lty=1:2, cex=1.5)
legend(500, 250, legend=c("leeftijd < 50", "leeftijd >= 50"),
col=c("red", "magenta"), lty=1:2, cex=1.)
legend(450, 250, legend=c("leeftijd < 50", "leeftijd >= 50"),
col=c("red", "magenta"), lty=1:2, cex=1.)
plot(out$time,out$I1,type="l",col="red",ylim=c(0,250),xlab="dagen",ylab="aantal infecties (duizenden)",lwd=2,cex=1.2)
plot(out$time,out$I1,type="l",col="red",ylim=c(0,250),xlab="dagen",ylab="aantal infecties (duizenden)",lwd=2,cex=2)
? plot
png("besmettingen-400600.png",width=600, height=400)
plot(out$time,out$I1,type="l",col="red",ylim=c(0,250),xlab="dagen",ylab="aantal infecties (duizenden)",lwd=2)
lines(out$time,out$I2,type="l",lty=2,col="magenta",lwd=2)
legend(450, 250, legend=c("leeftijd < 50", "leeftijd >= 50"),
col=c("red", "magenta"), lty=1:2, cex=1.)
dev.off()
png("besmettingen-400600.png",width=600, height=400)
plot(out$time,out$I1,type="l",col="red",ylim=c(0,250),xlab="dagen",ylab="aantal infecties (duizenden)",lwd=2)
lines(out$time,out$I2,type="l",lty=2,col="magenta",lwd=2)
legend(450, 250, legend=c("leeftijd < 50", "leeftijd >= 50"),
col=c("red", "magenta"), lty=1:2, cex=1.)
dev.off()
dev.off()
dev.off()
plot(out$time,out$H1*1000,type="l",col="red",ylim=c(0,16000),xlab="dagen",ylab="benodigd aantal ziekenhuisbedden")
lines(out$time,out$H2*1000,type="l",col="magenta",lty=2)
lines(out$time,(out$H1+out$H2)*1000,type="l",col="blue",lwd=2)
legend(450, 15000, legend=c("totaal","leeftijd < 50", "leeftijd >= 50"),
col=c("blue","red", "magenta"), lty=c(1,1,2), cex=1)
png("besmettingen-600400.png",width=600, height=400)
plot(out$time,out$I1,type="l",col="red",ylim=c(0,250),xlab="dagen",ylab="aantal infecties (duizenden)",lwd=2)
lines(out$time,out$I2,type="l",lty=2,col="magenta",lwd=2)
legend(450, 250, legend=c("leeftijd < 50", "leeftijd >= 50"),
col=c("red", "magenta"), lty=1:2, cex=1.)
dev.off()
png("ziekenhuisbedden-600400.png", width=600, height=400)
plot(out$time,out$H1*1000,type="l",col="red",ylim=c(0,16000),xlab="dagen",ylab="benodigd aantal ziekenhuisbedden")
lines(out$time,out$H2*1000,type="l",col="magenta",lty=2)
lines(out$time,(out$H1+out$H2)*1000,type="l",col="blue",lwd=2)
legend(450, 15000, legend=c("totaal","leeftijd < 50", "leeftijd >= 50"),
col=c("blue","red", "magenta"), lty=c(1,1,2), cex=1)
dev.off()
plot(out$time,out$C1*1000,type="l",col="red",ylim=c(0,4000),xlab="dagen",ylab="benodigd aantal IC bedden")
lines(out$time,out$C2*1000,type="l",col="magenta",lty=2)
lines(out$time,(out$C1+out$C2)*1000,type="l",col="blue",lwd=2)
legend(500, 4000, legend=c("totaal","leeftijd < 50", "leeftijd >= 50"),
col=c("blue","red", "magenta"), lty=c(1,1,2), cex=1.)
plot(out$time,out$C1*1000,type="l",col="red",ylim=c(0,4000),xlab="dagen",ylab="benodigd aantal IC bedden")
lines(out$time,out$C2*1000,type="l",col="magenta",lty=2)
lines(out$time,(out$C1+out$C2)*1000,type="l",col="blue",lwd=2)
legend(450, 4000, legend=c("totaal","leeftijd < 50", "leeftijd >= 50"),
col=c("blue","red", "magenta"), lty=c(1,1,2), cex=1.)
png("IC-bedden-600400.png")
plot(out$time,out$C1*1000,type="l",col="red",ylim=c(0,4000),xlab="dagen",ylab="benodigd aantal IC bedden")
lines(out$time,out$C2*1000,type="l",col="magenta",lty=2)
lines(out$time,(out$C1+out$C2)*1000,type="l",col="blue",lwd=2)
legend(450, 4000, legend=c("totaal","leeftijd < 50", "leeftijd >= 50"),
col=c("blue","red", "magenta"), lty=c(1,1,2), cex=1.)
dev.off()
png("IC-bedden-600400.png",width=600, height=400)
plot(out$time,out$C1*1000,type="l",col="red",ylim=c(0,4000),xlab="dagen",ylab="benodigd aantal IC bedden")
lines(out$time,out$C2*1000,type="l",col="magenta",lty=2)
lines(out$time,(out$C1+out$C2)*1000,type="l",col="blue",lwd=2)
legend(450, 4000, legend=c("totaal","leeftijd < 50", "leeftijd >= 50"),
col=c("blue","red", "magenta"), lty=c(1,1,2), cex=1.)
dev.off()
plot(out$time,out$R1,type="l",col="red",ylim=c(0,5500),lwd=2,xlab="dagen",ylab="hersteld en immuun (duizenden)")
lines(out$time,out$R2,type="l",col="magenta",lty=2,lwd=2)
legend(500, 5500, legend=c("leeftijd < 50", "leeftijd >= 50"),
col=c("red", "magenta"), lty=c(1,1,2), cex=1)
plot(out$time,out$R1,type="l",col="red",ylim=c(0,5500),lwd=2,xlab="dagen",ylab="hersteld en immuun (duizenden)")
lines(out$time,out$R2,type="l",col="magenta",lty=2,lwd=2)
legend(450, 5500, legend=c("leeftijd < 50", "leeftijd >= 50"),
col=c("red", "magenta"), lty=c(1,1,2), cex=1)
png("immune-600400.png",width=600, height=400)
plot(out$time,out$R1,type="l",col="red",ylim=c(0,5500),lwd=2,xlab="dagen",ylab="hersteld en immuun (duizenden)")
lines(out$time,out$R2,type="l",col="magenta",lty=2,lwd=2)
legend(450, 5500, legend=c("leeftijd < 50", "leeftijd >= 50"),
col=c("red", "magenta"), lty=c(1,1,2), cex=1)
dev.off()
0.7 * 0.7 * 2.84
0.6 * 0.7 * 1.75
1.0 * 0.7 * 2.84
1.0 * 0.7 * 2.84 * 0.863
0.7 * 0.7 * 1.75
1.99*0.14
1.99*0.137
0.27/0.86
0.042/0.735
